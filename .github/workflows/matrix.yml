name: Matrix

on:
  workflow_call:
    inputs:
      name:
        type: string
        description: "The name of the workflow used for the concurrency group."
        required: true
      matrix_string:
        type: string
        description: "The test matrix definition."
        required: true
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: true

# We will cancel previously triggered workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.name }}
  cancel-in-progress: true

jobs:
  execute-matrix:
    name: ${{ matrix.definitions.platform }} (${{ matrix.definitions.swift_version }} - ${{ matrix.definitions.os_version }})
    runs-on: ${{ matrix.definitions.runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.matrix_string) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: true

      - name: Run matrix job (Linux)
        timeout-minutes: 60
        if: ${{ matrix.definitions.platform == 'Linux' }}
        run: |
          SWIFT_CI_COMMAND_EXPRESSION=""

          if [ -n "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            SWIFT_CI_COMMAND_EXPRESSION="git config --global --add url.https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/.insteadOf https://github.com/ &&"
          fi

          if [ -n "${{ matrix.definitions.pre_build_command }}" ]; then
            SWIFT_CI_COMMAND_EXPRESSION="$SWIFT_CI_COMMAND_EXPRESSION ${{ matrix.definitions.pre_build_command }} && "
          fi

          SWIFT_CI_COMMAND_EXPRESSION="$SWIFT_CI_COMMAND_EXPRESSION ${{ matrix.definitions.build_command }} ${{ matrix.definitions.build_command_options }}"

          SWIFT_CI_RUNNER_IMAGE="${{ contains(matrix.definitions.swift_version, 'nightly') && 'swiftlang/swift' || 'swift' }}:${{ matrix.definitions.swift_version }}-${{ matrix.definitions.os_version }}"

          SWIFT_CI_WORKSPACE="/$(basename "${{ github.workspace }}")"

          docker run -v "${{ github.workspace }}":"$SWIFT_CI_WORKSPACE" \
            -w "$SWIFT_CI_WORKSPACE" \
            -e CI="$CI" \
            -e GITHUB_ACTIONS="$GITHUB_ACTIONS" \
            -e GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            -e SWIFT_VERSION="${{ matrix.definitions.swift_version }}" \
            -e SWIFT_CI_COMMAND_EXPRESSION="$SWIFT_CI_COMMAND_EXPRESSION" \
            -e SWIFT_CI_WORKSPACE="$SWIFT_CI_WORKSPACE" \
            "$SWIFT_CI_RUNNER_IMAGE" \
            bash -c "swift --version  && swift test --version && $SWIFT_CI_COMMAND_EXPRESSION"

      - name: Run matrix job (Windows windowsservercore)
        timeout-minutes: 60
        if: ${{ matrix.definitions.platform == 'Windows windowsservercore' }}
        run: |
          mkdir $env:TEMP\scripts
          echo @'
          Set-PSDebug -Trace 1
          $Source = "C:\_w\work"
          $Image = "${{ contains(matrix.definitions.swift_version, 'nightly') && 'swiftlang/swift' || 'swift' }}:${{ matrix.definitions.swift_version }}-${{ matrix.definitions.os_version }}"

          # Run the command following `Invoke-Program`.
          # If that command returns a non-zero exit code, return the same exit code from this script.
          function Invoke-Program($Executable) {
            & $Executable @args
            if ($LastExitCode -ne 0) {
              exit $LastExitCode
            }
          }
          Invoke-Program swift --version
          Invoke-Program swift test --version
          Invoke-Program cd $Source

          # if (-not [string]::IsNullOrEmpty("${{ secrets.PERSONAL_ACCESS_TOKEN }}")) {
          #   Invoke-Program git config --global --add url.https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/.insteadOf https://github.com/
          # }

          ${{ matrix.definitions.windows_pre_build_command }}
          Invoke-Program ${{ matrix.definitions.windows_build_command }} ${{ matrix.definitions.windows_build_command_options }}
          '@ >> $env:TEMP\scripts\run.ps1

          docker run -v ${{ github.workspace }}:C:\_w\work -v $env:TEMP\scripts:C:\_w\scripts -e CI=$env:CI -e GITHUB_ACTIONS=$env:GITHUB_ACTIONS -e SWIFT_VERSION=${{ matrix.definitions.swift_version }} $Image powershell.exe -NoLogo -File C:\_w\scripts\run.ps1

      - name: Run matrix job (Windows)
        timeout-minutes: 60
        if: ${{ matrix.definitions.platform == 'Windows' }}
        env:
          SWIFT_VERSION: ${{ matrix.definitions.swift_version }}
        run: |
          Invoke-WebRequest -Uri https://raw.githubusercontent.com/swiftlang/github-workflows/refs/heads/main/.github/workflows/scripts/windows/install-vsb.ps1 -OutFile $env:TEMP\install-vsb.ps1
          . $env:TEMP\install-vsb.ps1
          del $env:TEMP\install-vsb.ps1

          Invoke-WebRequest -Uri https://raw.githubusercontent.com/swiftlang/github-workflows/refs/heads/main/.github/workflows/scripts/windows/swift/install-swift.ps1 -OutFile $env:TEMP\install-swift.ps1
          Invoke-WebRequest -Uri https://raw.githubusercontent.com/swiftlang/github-workflows/refs/heads/main/.github/workflows/scripts/windows/swift/install-swift-${{ matrix.swift_version }}.ps1 -OutFile $env:TEMP\install-swift-${{ matrix.swift_version }}.ps1
          . $env:TEMP\install-swift-${{ matrix.swift_version }}.ps1
          del $env:TEMP\install-swift*.ps1

          mkdir $env:TEMP\scripts
          echo @'
          Set-PSDebug -Trace 1
          $Source = $env:GITHUB_WORKSPACE
          $Image = "${{ contains(matrix.definitions.swift_version, 'nightly') && 'swiftlang/swift' || 'swift' }}:${{ matrix.definitions.swift_version }}-${{ matrix.definitions.os_version }}"

          # Run the command following `Invoke-Program`.
          # If that command returns a non-zero exit code, return the same exit code from this script.
          function Invoke-Program($Executable) {
            & $Executable @args
            if ($LastExitCode -ne 0) {
              exit $LastExitCode
            }
          }
          Invoke-Program swift --version
          Invoke-Program swift test --version
          Invoke-Program cd $Source

          # if (-not [string]::IsNullOrEmpty("${{ secrets.PERSONAL_ACCESS_TOKEN }}")) {
          #   Invoke-Program git config --global --add url.https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/.insteadOf https://github.com/
          # }

          Invoke-Program ${{ matrix.definitions.windows_pre_build_command }}
          Invoke-Program ${{ matrix.definitions.windows_build_command }} ${{ matrix.definitions.windows_build_command_options }}
          '@ >> $env:TEMP\scripts\run.ps1

          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          RefreshEnv
          powershell.exe -NoLogo -File $env:TEMP\scripts\run.ps1; exit $LastExitCode
