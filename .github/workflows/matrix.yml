name: Matrix

on:
  workflow_call:
    inputs:
      name:
        type: string
        description: "The name of the workflow used for the concurrency group."
        required: true
      matrix_string:
        type: string
        description: "The test matrix definition."
        required: true
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: true

# We will cancel previously triggered workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.name }}
  cancel-in-progress: true

jobs:
  execute-matrix:
    name: ${{ matrix.definitions.platform }} (${{ matrix.definitions.swift_version }} - ${{ matrix.definitions.os_version }})
    runs-on: ${{ matrix.definitions.runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.matrix_string) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: true
      - name: Run matrix job (Linux)
        timeout-minutes: 60
        if: ${{ matrix.definitions.platform == 'Linux' }}
        run: |
          SWIFT_CI_COMMAND_EXPRESSION=""

          if [ -n "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            SWIFT_CI_COMMAND_EXPRESSION="git config --global --add url.https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/.insteadOf https://github.com/ &&"
          fi

          if [ -n "${{ matrix.definitions.pre_build_command }}" ]; then
            SWIFT_CI_COMMAND_EXPRESSION="$SWIFT_CI_COMMAND_EXPRESSION ${{ matrix.definitions.pre_build_command }} && "
          fi

          SWIFT_CI_COMMAND_EXPRESSION="$SWIFT_CI_COMMAND_EXPRESSION ${{ matrix.definitions.build_command }} ${{ matrix.definitions.build_command_options }}"

          SWIFT_CI_RUNNER_IMAGE="${{ contains(matrix.definitions.swift_version, 'nightly') && 'swiftlang/swift' || 'swift' }}:${{ matrix.definitions.swift_version }}-${{ matrix.definitions.os_version }}"

          SWIFT_CI_WORKSPACE="/$(basename "${{ github.workspace }}")"

          docker run -v "${{ github.workspace }}":"$SWIFT_CI_WORKSPACE" \
            -w "$SWIFT_CI_WORKSPACE" \
            -e CI="$CI" \
            -e GITHUB_ACTIONS="$GITHUB_ACTIONS" \
            -e GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            -e SWIFT_VERSION="${{ matrix.definitions.swift_version }}" \
            -e SWIFT_CI_COMMAND_EXPRESSION="$SWIFT_CI_COMMAND_EXPRESSION" \
            -e SWIFT_CI_WORKSPACE="$SWIFT_CI_WORKSPACE" \
            "$SWIFT_CI_RUNNER_IMAGE" \
            bash -c "swift --version && $SWIFT_CI_COMMAND_EXPRESSION"

      - name: Run matrix job (Windows windowsservercore)
        timeout-minutes: 60
        if: ${{ matrix.definitions.platform == 'Windows' }}
        shell: pwsh
        run: |
          $SWIFT_CI_COMMAND_EXPRESSION = ""

          if (-not [string]::IsNullOrEmpty("${{ secrets.PERSONAL_ACCESS_TOKEN }}")) {
            $SWIFT_CI_COMMAND_EXPRESSION += "git config --global --add url.https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/.insteadOf https://github.com/ & "
          }

          if (-not [string]::IsNullOrEmpty("${{ matrix.definitions.pre_build_command }}")) {
            $SWIFT_CI_COMMAND_EXPRESSION += "${{ matrix.definitions.pre_build_command }} & "
          }

          $SWIFT_CI_COMMAND_EXPRESSION += "${{ matrix.definitions.build_command }} ${{ matrix.definitions.build_command_options }}"

          $SWIFT_CI_RUNNER_IMAGE = "${{ contains(matrix.definitions.swift_version, 'nightly') && 'swiftlang/swift' || 'swift' }}:${{ matrix.definitions.swift_version }}-${{ matrix.definitions.os_version }}"

          $SWIFT_CI_WORKSPACE = "C:\" + (Split-Path "${{ github.workspace }}" -Leaf)

          docker run -v "${{ github.workspace }}:$SWIFT_CI_WORKSPACE" `
            -w "$SWIFT_CI_WORKSPACE" `
            -e CI=$env:CI `
            -e GITHUB_ACTIONS=$env:GITHUB_ACTIONS `
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} `
            -e SWIFT_VERSION="${{ matrix.definitions.swift_version }}" `
            -e SWIFT_CI_COMMAND_EXPRESSION="$SWIFT_CI_COMMAND_EXPRESSION" `
            -e SWIFT_CI_WORKSPACE="$SWIFT_CI_WORKSPACE" `
            $SWIFT_CI_RUNNER_IMAGE `
            cmd /s /c "swift --version & $SWIFT_CI_COMMAND_EXPRESSION"
